// <auto-generated />
using System;
using CharityAuction.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CharityAuction.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604180427_AddModerationFieldsToAuction")]
    partial class AddModerationFieldsToAuction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CharityAuction.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CommissionBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            AccessFailedCount = 0,
                            Balance = 5000m,
                            CommissionBalance = 500m,
                            ConcurrencyStamp = "e44de91e-ab24-49a0-8281-9e97e788b958",
                            CreatedAt = new DateTime(2024, 12, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN.USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEBSw+UalSX0VYuDAl/Xypu2vMjd1zMHyH9usuO7ImGwYNIpg363+jE1nMXyYaT2cg==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1.jpg",
                            Role = "Admin",
                            SecurityStamp = "5449cc63-73e0-4f30-8357-03cab2541f9e",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            UserName = "admin.user"
                        },
                        new
                        {
                            Id = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            AccessFailedCount = 0,
                            Balance = 3000m,
                            CommissionBalance = 300m,
                            ConcurrencyStamp = "e194a17b-fc0d-493d-9c0f-8fdcfe8f6481",
                            CreatedAt = new DateTime(2024, 12, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            Email = "seller@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seller",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@EXAMPLE.COM",
                            NormalizedUserName = "SELLER.USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPj+OQ9VubUFphSQjvyabUeuAhiT1/GbEI8aP25DwtpFl2GM6ZOvIAwOGwxYMCfJLQ==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/2.jpg",
                            Role = "Seller",
                            SecurityStamp = "5e391bd5-3942-4910-ab3e-2d789f3969e0",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            UserName = "seller.user"
                        },
                        new
                        {
                            Id = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f",
                            AccessFailedCount = 0,
                            Balance = 4000m,
                            CommissionBalance = 100m,
                            ConcurrencyStamp = "ad093f4d-72cc-4d33-b4b8-3b364a0b8d24",
                            CreatedAt = new DateTime(2024, 12, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            Email = "buyer1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER1@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.ONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEBqa1Wvw7wIVBlmvDTxr9HFrimbUigEkNAfFqddCm8BM2/8OYzCsQ03jy73EW2OHxg==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/3.jpg",
                            Role = "Buyer",
                            SecurityStamp = "a3ecd296-b9cd-44f6-9472-34f8ec80a0f9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            UserName = "buyer.one"
                        },
                        new
                        {
                            Id = "e034755d-65a9-4f2b-a661-556edac6a6b0",
                            AccessFailedCount = 0,
                            Balance = 2500m,
                            CommissionBalance = 150m,
                            ConcurrencyStamp = "b2238d9b-9fe5-44ed-89ed-5ecee9d6406c",
                            CreatedAt = new DateTime(2024, 12, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            Email = "buyer2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER2@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.TWO",
                            PasswordHash = "AQAAAAIAAYagAAAAEEByCA8kx4bPCVlCNN53jaAa89zJhPNfvB2Upqx+6vn7v3yAJVzQ/nTID8oEz2dbig==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/4.jpg",
                            Role = "Buyer",
                            SecurityStamp = "d366195e-f880-497a-8981-94aeb2d3c19d",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            UserName = "buyer.two"
                        },
                        new
                        {
                            Id = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f",
                            AccessFailedCount = 0,
                            Balance = 3500m,
                            CommissionBalance = 200m,
                            ConcurrencyStamp = "273c88da-fedf-4d6a-9132-691abd2aaa42",
                            CreatedAt = new DateTime(2024, 12, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            Email = "buyer3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "Three",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER3@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.THREE",
                            PasswordHash = "AQAAAAIAAYagAAAAEApQob7zdnpLQf4EBIToC8p7g+9DE7STNlw6HgEHrKrFastSZ8qe/aMvI9cl2PrU6Q==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/5.jpg",
                            Role = "Buyer",
                            SecurityStamp = "68eb74f6-f267-48b1-8964-d57ff9434cc8",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 700, DateTimeKind.Utc).AddTicks(3752),
                            UserName = "buyer.three"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("FlaggedReason")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSold")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Пускова установка в ідеальному стані для бойових завдань.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/9rFs09QD/bazuka.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 5000m,
                            Title = "Базука"
                        },
                        new
                        {
                            Id = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Оптичний бінокль для спостереження на великій відстані.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/Tp7FDPKC/binokl.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 800m,
                            Title = "Бінокль"
                        },
                        new
                        {
                            Id = new Guid("d09c2220-669a-401b-8f6a-4f4f114329df"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Тактична кобура Blackhawk для зручного носіння зброї.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/d7dxpm4x/kobura-blackhawk.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 1200m,
                            Title = "Кобура Blackhawk"
                        },
                        new
                        {
                            Id = new Guid("6309e613-c9d2-4bbc-b0b6-546d82d27be5"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Легендарний радянський гранатомет РПГ-18 \"Муха\".",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/0zz3dqmx/RPG-18-Mukha.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 7000m,
                            Title = "РПГ-18 Муха"
                        },
                        new
                        {
                            Id = new Guid("803387b4-afb3-4fcb-840a-9dd9f63fc841"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Оригінальна фуражка з комплекту екіпіровки окупантів.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/87xYZnBv/russian-cap.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 500m,
                            Title = "Фуражка російської армії"
                        },
                        new
                        {
                            Id = new Guid("fe807746-bf07-4157-aaf4-f157ff3c6f2a"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Типова польова сумка орків, знайдена на передовій.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/K3cpKXF6/russian-orkivska-sumka.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 400m,
                            Title = "Орківська сумка"
                        },
                        new
                        {
                            Id = new Guid("9f74c4e9-8818-41cf-8520-b055ad40d3f1"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Армійський пайок російської армії (умовно їстівний).",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/5YVRVYrN/russian-payok.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 200m,
                            Title = "Російський сухпайок"
                        },
                        new
                        {
                            Id = new Guid("6824a88e-6cc6-4708-99c7-77d96bc4828f"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Оригінальний шеврон українського підрозділу №71.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/s13NHWST/shevron-Ukraine-71.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 600m,
                            Title = "Шеврон Україна 71"
                        },
                        new
                        {
                            Id = new Guid("cc5644bb-3762-4a4c-8842-a9fc93f5c73a"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Шеврон спецпідрозділу з емблемою кажана.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/xqgFwd3n/tripe.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 450m,
                            Title = "Шеврон Спецназу (Тріп)"
                        },
                        new
                        {
                            Id = new Guid("bd9ebb2b-c661-4801-a15d-1603e988039a"),
                            CreatedAt = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            Description = "Комплект зброї для зенітного підрозділу в камуфляжі.",
                            EndTime = new DateTime(2025, 6, 11, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            ImageUrl = "https://i.postimg.cc/JGndMWpJ/zenitka.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsFlagged = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 6, 4, 18, 4, 26, 929, DateTimeKind.Utc).AddTicks(5939),
                            StartingPrice = 10000m,
                            Title = "Зенітка (комплект)"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDonated")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d902649b-5e54-41d2-a68c-296af155a48c"),
                            Amount = 1600m,
                            AuctionId = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 6, 4, 8, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("56622d4a-3b74-4c69-9e2c-492718854beb"),
                            Amount = 1700m,
                            AuctionId = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 6, 4, 10, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("96012c54-a3ca-45a7-a14c-15f61c6f41fe"),
                            Amount = 210m,
                            AuctionId = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 6, 4, 11, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("a910dfe3-c1b6-41ee-97b6-cd179e2cade6"),
                            Amount = 220m,
                            AuctionId = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 6, 4, 13, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("0ce49bc6-ee31-401d-a76a-aa5dcad1f3a8"),
                            Amount = 850m,
                            AuctionId = new Guid("d09c2220-669a-401b-8f6a-4f4f114329df"),
                            CreatedAt = new DateTime(2025, 6, 4, 12, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("0a714ba8-d85a-41a2-b35e-3125b7666e46"),
                            Amount = 7100m,
                            AuctionId = new Guid("6309e613-c9d2-4bbc-b0b6-546d82d27be5"),
                            CreatedAt = new DateTime(2025, 6, 4, 9, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("f68d69ff-6b16-4025-9601-d0486bfc4ee1"),
                            Amount = 550m,
                            AuctionId = new Guid("803387b4-afb3-4fcb-840a-9dd9f63fc841"),
                            CreatedAt = new DateTime(2025, 6, 4, 15, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("6624c357-ddde-40b7-ae3f-81ce04991aca"),
                            Amount = 450m,
                            AuctionId = new Guid("fe807746-bf07-4157-aaf4-f157ff3c6f2a"),
                            CreatedAt = new DateTime(2025, 6, 4, 14, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("2a6b9f72-bffb-493a-8847-f98e906ab2ea"),
                            Amount = 230m,
                            AuctionId = new Guid("9f74c4e9-8818-41cf-8520-b055ad40d3f1"),
                            CreatedAt = new DateTime(2025, 6, 4, 16, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("9ec34e56-05f0-4aa9-8643-de1ab7033f2b"),
                            Amount = 700m,
                            AuctionId = new Guid("6824a88e-6cc6-4708-99c7-77d96bc4828f"),
                            CreatedAt = new DateTime(2025, 6, 4, 17, 4, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("0a9c95cb-5c4a-4205-96b3-4c3433338039"),
                            Amount = 500m,
                            AuctionId = new Guid("cc5644bb-3762-4a4c-8842-a9fc93f5c73a"),
                            CreatedAt = new DateTime(2025, 6, 4, 17, 14, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("1c4fe240-b610-4325-9616-3e207c1e5244"),
                            Amount = 10500m,
                            AuctionId = new Guid("bd9ebb2b-c661-4801-a15d-1603e988039a"),
                            CreatedAt = new DateTime(2025, 6, 4, 17, 34, 26, 929, DateTimeKind.Utc).AddTicks(6033),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Buyer",
                            NormalizedName = "BUYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "Organizer")
                        .WithMany("Auctions")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Bid", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
