// <auto-generated />
using System;
using CharityAuction.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CharityAuction.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250501100156_AddPaymentModel")]
    partial class AddPaymentModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CharityAuction.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CommissionBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            AccessFailedCount = 0,
                            Balance = 5000m,
                            CommissionBalance = 500m,
                            ConcurrencyStamp = "d369ca88-ef67-4cdb-b2fc-03f3758972f5",
                            CreatedAt = new DateTime(2024, 11, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN.USER",
                            PasswordHash = "AQAAAAIAAYagAAAAED2jh5rQQfEthIOxPC3WsVLLvFeyXYA0FkQWEWIztP9C0Gf62yhlK7eCjJnuHoz5Rg==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1.jpg",
                            Role = "Admin",
                            SecurityStamp = "c5507851-0c91-494a-b0f5-266ce94a171b",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            UserName = "admin.user"
                        },
                        new
                        {
                            Id = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            AccessFailedCount = 0,
                            Balance = 3000m,
                            CommissionBalance = 300m,
                            ConcurrencyStamp = "892035b7-bf95-4a72-9c37-c5b09b12372b",
                            CreatedAt = new DateTime(2024, 11, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            Email = "seller@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seller",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@EXAMPLE.COM",
                            NormalizedUserName = "SELLER.USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEOwZiafdzg4PsMW06EkScyBE+iaNVYiwyHydnpjFbspv4w/+9Nttnz1srvVfI/LvAg==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/2.jpg",
                            Role = "Seller",
                            SecurityStamp = "18f599fe-15f3-474b-81bc-49e5845154a7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            UserName = "seller.user"
                        },
                        new
                        {
                            Id = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f",
                            AccessFailedCount = 0,
                            Balance = 4000m,
                            CommissionBalance = 100m,
                            ConcurrencyStamp = "6a21a751-e8fc-42a7-bf0d-8af1d0efefb1",
                            CreatedAt = new DateTime(2024, 11, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            Email = "buyer1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER1@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.ONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3qLDy/Kv+6Oy3ta2zbcvI2KOCW/HcAUeJ4sCNlglyfHU+tmBmv9f4Idf/Gm/dNEQ==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/3.jpg",
                            Role = "Buyer",
                            SecurityStamp = "84473a13-770a-4e8c-917d-766470496dba",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            UserName = "buyer.one"
                        },
                        new
                        {
                            Id = "e034755d-65a9-4f2b-a661-556edac6a6b0",
                            AccessFailedCount = 0,
                            Balance = 2500m,
                            CommissionBalance = 150m,
                            ConcurrencyStamp = "a1ca8dce-1151-4d02-b2c1-aab356e1d3e2",
                            CreatedAt = new DateTime(2024, 11, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            Email = "buyer2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER2@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.TWO",
                            PasswordHash = "AQAAAAIAAYagAAAAEGq6X0hB7UbphfjJ9aswxWxM17C7KH1ZfCjPUOfmCpWu3u8u9iYLZQn+B4QpgwIRvg==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/4.jpg",
                            Role = "Buyer",
                            SecurityStamp = "d48c2863-a2f4-4007-ae98-b70a12356d66",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            UserName = "buyer.two"
                        },
                        new
                        {
                            Id = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f",
                            AccessFailedCount = 0,
                            Balance = 3500m,
                            CommissionBalance = 200m,
                            ConcurrencyStamp = "ad136792-fb71-48fd-9799-7cd4470ad161",
                            CreatedAt = new DateTime(2024, 11, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            Email = "buyer3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "Three",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER3@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.THREE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGd8RKyX+lSrL2J7VrqfFyXc3jOGc09XwOYpcP2yE5rsRulbqfZe5D71AnqVWiMS6g==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/5.jpg",
                            Role = "Buyer",
                            SecurityStamp = "40f99b42-f3d2-44c9-a604-c718747ee308",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 67, DateTimeKind.Utc).AddTicks(9892),
                            UserName = "buyer.three"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSold")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Пускова установка в ідеальному стані для бойових завдань.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/9rFs09QD/bazuka.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 5000m,
                            Title = "Базука"
                        },
                        new
                        {
                            Id = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Оптичний бінокль для спостереження на великій відстані.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/Tp7FDPKC/binokl.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 800m,
                            Title = "Бінокль"
                        },
                        new
                        {
                            Id = new Guid("d09c2220-669a-401b-8f6a-4f4f114329df"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Тактична кобура Blackhawk для зручного носіння зброї.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/d7dxpm4x/kobura-blackhawk.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 1200m,
                            Title = "Кобура Blackhawk"
                        },
                        new
                        {
                            Id = new Guid("6309e613-c9d2-4bbc-b0b6-546d82d27be5"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Легендарний радянський гранатомет РПГ-18 \"Муха\".",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/0zz3dqmx/RPG-18-Mukha.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 7000m,
                            Title = "РПГ-18 Муха"
                        },
                        new
                        {
                            Id = new Guid("803387b4-afb3-4fcb-840a-9dd9f63fc841"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Оригінальна фуражка з комплекту екіпіровки окупантів.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/87xYZnBv/russian-cap.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 500m,
                            Title = "Фуражка російської армії"
                        },
                        new
                        {
                            Id = new Guid("fe807746-bf07-4157-aaf4-f157ff3c6f2a"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Типова польова сумка орків, знайдена на передовій.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/K3cpKXF6/russian-orkivska-sumka.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 400m,
                            Title = "Орківська сумка"
                        },
                        new
                        {
                            Id = new Guid("9f74c4e9-8818-41cf-8520-b055ad40d3f1"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Армійський пайок російської армії (умовно їстівний).",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/5YVRVYrN/russian-payok.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 200m,
                            Title = "Російський сухпайок"
                        },
                        new
                        {
                            Id = new Guid("6824a88e-6cc6-4708-99c7-77d96bc4828f"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Оригінальний шеврон українського підрозділу №71.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/s13NHWST/shevron-Ukraine-71.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 600m,
                            Title = "Шеврон Україна 71"
                        },
                        new
                        {
                            Id = new Guid("cc5644bb-3762-4a4c-8842-a9fc93f5c73a"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Шеврон спецпідрозділу з емблемою кажана.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/xqgFwd3n/tripe.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 450m,
                            Title = "Шеврон Спецназу (Тріп)"
                        },
                        new
                        {
                            Id = new Guid("bd9ebb2b-c661-4801-a15d-1603e988039a"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            Description = "Комплект зброї для зенітного підрозділу в камуфляжі.",
                            EndTime = new DateTime(2025, 5, 8, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            ImageUrl = "https://i.postimg.cc/JGndMWpJ/zenitka.jpg",
                            IsActive = true,
                            IsApproved = false,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 5, 1, 10, 1, 56, 305, DateTimeKind.Utc).AddTicks(167),
                            StartingPrice = 10000m,
                            Title = "Зенітка (комплект)"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDonated")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1b4fea8-1509-49f0-be3f-169fc6f02a95"),
                            Amount = 1600m,
                            AuctionId = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 5, 1, 0, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("1497f24f-4ff6-489d-9af1-5dadf12da820"),
                            Amount = 1700m,
                            AuctionId = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 5, 1, 2, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("ab32ac39-0cd5-4941-b72e-f13987514583"),
                            Amount = 210m,
                            AuctionId = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 5, 1, 3, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("a52ed81c-ce45-448b-a573-97c4b9d5021b"),
                            Amount = 220m,
                            AuctionId = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 5, 1, 5, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("252aade8-8a7a-4806-aeb1-8cef6c5d2491"),
                            Amount = 850m,
                            AuctionId = new Guid("d09c2220-669a-401b-8f6a-4f4f114329df"),
                            CreatedAt = new DateTime(2025, 5, 1, 4, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("9e5a5295-611d-4e1e-aa1b-258775b90444"),
                            Amount = 7100m,
                            AuctionId = new Guid("6309e613-c9d2-4bbc-b0b6-546d82d27be5"),
                            CreatedAt = new DateTime(2025, 5, 1, 1, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("19f1c20f-e4f5-4fee-9699-55c22031ac7d"),
                            Amount = 550m,
                            AuctionId = new Guid("803387b4-afb3-4fcb-840a-9dd9f63fc841"),
                            CreatedAt = new DateTime(2025, 5, 1, 7, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("c716a094-d304-418d-a09c-a1a23e5adfe3"),
                            Amount = 450m,
                            AuctionId = new Guid("fe807746-bf07-4157-aaf4-f157ff3c6f2a"),
                            CreatedAt = new DateTime(2025, 5, 1, 6, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("55f414ee-3faa-40fd-896b-71991cfa40aa"),
                            Amount = 230m,
                            AuctionId = new Guid("9f74c4e9-8818-41cf-8520-b055ad40d3f1"),
                            CreatedAt = new DateTime(2025, 5, 1, 8, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("327b5805-2ca7-4772-8119-eb30916b2904"),
                            Amount = 700m,
                            AuctionId = new Guid("6824a88e-6cc6-4708-99c7-77d96bc4828f"),
                            CreatedAt = new DateTime(2025, 5, 1, 9, 1, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("10817540-6e0a-4fc0-827f-ef833cc00191"),
                            Amount = 500m,
                            AuctionId = new Guid("cc5644bb-3762-4a4c-8842-a9fc93f5c73a"),
                            CreatedAt = new DateTime(2025, 5, 1, 9, 11, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("5a095e47-6403-4dc6-8e0b-efcafa43a72e"),
                            Amount = 10500m,
                            AuctionId = new Guid("bd9ebb2b-c661-4801-a15d-1603e988039a"),
                            CreatedAt = new DateTime(2025, 5, 1, 9, 31, 56, 305, DateTimeKind.Utc).AddTicks(322),
                            IsDonated = false,
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Buyer",
                            NormalizedName = "BUYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "Organizer")
                        .WithMany("Auctions")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Bid", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Notification", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
