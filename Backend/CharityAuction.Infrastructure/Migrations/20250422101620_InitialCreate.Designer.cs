// <auto-generated />
using System;
using CharityAuction.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CharityAuction.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250422101620_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CharityAuction.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CommissionBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            AccessFailedCount = 0,
                            Balance = 5000m,
                            CommissionBalance = 500m,
                            ConcurrencyStamp = "d4643afe-af77-417a-979c-eb147dc93063",
                            CreatedAt = new DateTime(2024, 10, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN.USER",
                            PasswordHash = "AQAAAAIAAYagAAAAECkvdcjiI2Xl14xTxv7a7HVU7J0/RXrtCVRFfgjnRRaHH0+mns5BfNXljOSdMfMK1Q==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/1.jpg",
                            Role = "admin",
                            SecurityStamp = "0ba344ca-0937-41b4-a6f9-30a447a08edd",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            UserName = "admin.user"
                        },
                        new
                        {
                            Id = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            AccessFailedCount = 0,
                            Balance = 3000m,
                            CommissionBalance = 300m,
                            ConcurrencyStamp = "31f7f6e5-85a0-456a-b7e4-05d0478ae3c2",
                            CreatedAt = new DateTime(2024, 10, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            Email = "seller@example.com",
                            EmailConfirmed = true,
                            FirstName = "Seller",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELLER@EXAMPLE.COM",
                            NormalizedUserName = "SELLER.USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJgoLcSGPNti3WNUMxnUmkeUZKvapQ5IeyEvmyIHqdd/svRdt3DZIw1ye4ndmgVAw==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/2.jpg",
                            Role = "seller",
                            SecurityStamp = "575d3302-4e9b-4b0e-a789-940fec50c674",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            UserName = "seller.user"
                        },
                        new
                        {
                            Id = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f",
                            AccessFailedCount = 0,
                            Balance = 4000m,
                            CommissionBalance = 100m,
                            ConcurrencyStamp = "6780a098-662a-456d-a229-bcda59627019",
                            CreatedAt = new DateTime(2024, 10, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            Email = "buyer1@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "One",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER1@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.ONE",
                            PasswordHash = "AQAAAAIAAYagAAAAEH7o84cq1LntbsEj5rRxYLHpjJJJTlyPf/BWx4xA4GspyjeBDQ8hcrZjWbL/3JGYoA==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/3.jpg",
                            Role = "buyer",
                            SecurityStamp = "103adb65-7b32-4902-959a-941fb779c37e",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            UserName = "buyer.one"
                        },
                        new
                        {
                            Id = "e034755d-65a9-4f2b-a661-556edac6a6b0",
                            AccessFailedCount = 0,
                            Balance = 2500m,
                            CommissionBalance = 150m,
                            ConcurrencyStamp = "d9eefeec-1c92-4eab-9190-bf3832999a5e",
                            CreatedAt = new DateTime(2024, 10, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            Email = "buyer2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "Two",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER2@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.TWO",
                            PasswordHash = "AQAAAAIAAYagAAAAEA8GWa1LeHBky29wcnjDovvAvH4Q3rLicbm+98whPwfNGf6j5XFvGMfA9opcwV2Jgw==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/4.jpg",
                            Role = "buyer",
                            SecurityStamp = "65a3cb0c-5484-4458-936e-26e7ee10e587",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            UserName = "buyer.two"
                        },
                        new
                        {
                            Id = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f",
                            AccessFailedCount = 0,
                            Balance = 3500m,
                            CommissionBalance = 200m,
                            ConcurrencyStamp = "26f8a894-9be6-4340-9006-5c1cc8031033",
                            CreatedAt = new DateTime(2024, 10, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            Email = "buyer3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "Three",
                            LockoutEnabled = false,
                            NormalizedEmail = "BUYER3@EXAMPLE.COM",
                            NormalizedUserName = "BUYER.THREE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFIcu/1fEjVd2VdcklcGo5GV8puoR8aqdrsj+IuH9LpADnbbKh/NQbgvU801f48Clg==",
                            PhoneNumberConfirmed = false,
                            PhotoUrl = "https://ipfs.io/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/5.jpg",
                            Role = "buyer",
                            SecurityStamp = "d09042a2-34b9-42f0-b1e0-6d131a0bad07",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 177, DateTimeKind.Utc).AddTicks(14),
                            UserName = "buyer.three"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSold")
                        .HasColumnType("boolean");

                    b.Property<string>("OrganizerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Пускова установка в ідеальному стані для бойових завдань.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/9rFs09QD/bazuka.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 5000m,
                            Title = "Базука"
                        },
                        new
                        {
                            Id = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Оптичний бінокль для спостереження на великій відстані.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/Tp7FDPKC/binokl.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 800m,
                            Title = "Бінокль"
                        },
                        new
                        {
                            Id = new Guid("d09c2220-669a-401b-8f6a-4f4f114329df"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Тактична кобура Blackhawk для зручного носіння зброї.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/d7dxpm4x/kobura-blackhawk.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 1200m,
                            Title = "Кобура Blackhawk"
                        },
                        new
                        {
                            Id = new Guid("6309e613-c9d2-4bbc-b0b6-546d82d27be5"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Легендарний радянський гранатомет РПГ-18 \"Муха\".",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/0zz3dqmx/RPG-18-Mukha.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 7000m,
                            Title = "РПГ-18 Муха"
                        },
                        new
                        {
                            Id = new Guid("803387b4-afb3-4fcb-840a-9dd9f63fc841"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Оригінальна фуражка з комплекту екіпіровки окупантів.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/87xYZnBv/russian-cap.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 500m,
                            Title = "Фуражка російської армії"
                        },
                        new
                        {
                            Id = new Guid("fe807746-bf07-4157-aaf4-f157ff3c6f2a"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Типова польова сумка орків, знайдена на передовій.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/K3cpKXF6/russian-orkivska-sumka.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 400m,
                            Title = "Орківська сумка"
                        },
                        new
                        {
                            Id = new Guid("9f74c4e9-8818-41cf-8520-b055ad40d3f1"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Армійський пайок російської армії (умовно їстівний).",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/5YVRVYrN/russian-payok.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 200m,
                            Title = "Російський сухпайок"
                        },
                        new
                        {
                            Id = new Guid("6824a88e-6cc6-4708-99c7-77d96bc4828f"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Оригінальний шеврон українського підрозділу №71.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/s13NHWST/shevron-Ukraine-71.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 600m,
                            Title = "Шеврон Україна 71"
                        },
                        new
                        {
                            Id = new Guid("cc5644bb-3762-4a4c-8842-a9fc93f5c73a"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Шеврон спецпідрозділу з емблемою кажана.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/xqgFwd3n/tripe.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 450m,
                            Title = "Шеврон Спецназу (Тріп)"
                        },
                        new
                        {
                            Id = new Guid("bd9ebb2b-c661-4801-a15d-1603e988039a"),
                            CreatedAt = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            Description = "Комплект зброї для зенітного підрозділу в камуфляжі.",
                            EndTime = new DateTime(2025, 4, 29, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            ImageUrl = "https://i.postimg.cc/JGndMWpJ/zenitka.jpg",
                            IsActive = true,
                            IsSold = false,
                            OrganizerId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            StartTime = new DateTime(2025, 4, 22, 10, 16, 20, 412, DateTimeKind.Utc).AddTicks(7620),
                            StartingPrice = 10000m,
                            Title = "Зенітка (комплект)"
                        });
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e653f443-a56b-4ecf-ad1f-e221230d1f50"),
                            Amount = 1600m,
                            AuctionId = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 4, 22, 0, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("017099fa-23bd-40e3-a73a-511668a3e9d9"),
                            Amount = 1700m,
                            AuctionId = new Guid("db2b8c40-60c7-4ed1-a6cb-393be4444f77"),
                            CreatedAt = new DateTime(2025, 4, 22, 2, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("92ef61c5-0ffc-4e12-9c7a-c2dd9c05aff8"),
                            Amount = 210m,
                            AuctionId = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 4, 22, 3, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("1b507f33-bf08-4fd7-9b7b-37be4396d7a1"),
                            Amount = 220m,
                            AuctionId = new Guid("29fe88ee-701c-42c3-9a4f-7d1926d1c23f"),
                            CreatedAt = new DateTime(2025, 4, 22, 5, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("c09bb673-4389-408d-8788-e5d78a8f9d62"),
                            Amount = 850m,
                            AuctionId = new Guid("d09c2220-669a-401b-8f6a-4f4f114329df"),
                            CreatedAt = new DateTime(2025, 4, 22, 4, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("ef18a1a6-2f3e-45b4-9c9e-c9d5c6d1253d"),
                            Amount = 7100m,
                            AuctionId = new Guid("6309e613-c9d2-4bbc-b0b6-546d82d27be5"),
                            CreatedAt = new DateTime(2025, 4, 22, 1, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("42ddc98f-fea2-4341-b680-c2ffa81265b4"),
                            Amount = 550m,
                            AuctionId = new Guid("803387b4-afb3-4fcb-840a-9dd9f63fc841"),
                            CreatedAt = new DateTime(2025, 4, 22, 7, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("a2b88f60-9394-4e7c-91fb-db8173f2dd17"),
                            Amount = 450m,
                            AuctionId = new Guid("fe807746-bf07-4157-aaf4-f157ff3c6f2a"),
                            CreatedAt = new DateTime(2025, 4, 22, 6, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("568ec6b7-403b-4f9b-98b1-ed53f300b23c"),
                            Amount = 230m,
                            AuctionId = new Guid("9f74c4e9-8818-41cf-8520-b055ad40d3f1"),
                            CreatedAt = new DateTime(2025, 4, 22, 8, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        },
                        new
                        {
                            Id = new Guid("0b1f0546-b3bf-4ce9-bc19-cd70c6123309"),
                            Amount = 700m,
                            AuctionId = new Guid("6824a88e-6cc6-4708-99c7-77d96bc4828f"),
                            CreatedAt = new DateTime(2025, 4, 22, 9, 16, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0"
                        },
                        new
                        {
                            Id = new Guid("4e2361ad-05eb-44c1-8119-bbfd261f2b63"),
                            Amount = 500m,
                            AuctionId = new Guid("cc5644bb-3762-4a4c-8842-a9fc93f5c73a"),
                            CreatedAt = new DateTime(2025, 4, 22, 9, 26, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f"
                        },
                        new
                        {
                            Id = new Guid("a6fc542b-747b-4996-93a1-7255b32a6228"),
                            Amount = 10500m,
                            AuctionId = new Guid("bd9ebb2b-c661-4801-a15d-1603e988039a"),
                            CreatedAt = new DateTime(2025, 4, 22, 9, 46, 20, 412, DateTimeKind.Utc).AddTicks(8063),
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "buyer",
                            NormalizedName = "BUYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7b26038d-1a43-4248-90e1-dc7f0381d7fa",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "c9db7b0d-5889-4a71-b1a9-cf59ef2fa4be",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "62a7c1cd-e93a-4aab-a8a4-64e22210c77f",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "e034755d-65a9-4f2b-a661-556edac6a6b0",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "2a8da342-5a30-4c2a-a9f2-77bb6659c25f",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "Organizer")
                        .WithMany("Auctions")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Bid", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.Auction", "Auction")
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CharityAuction.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Auctions");

                    b.Navigation("Bids");
                });

            modelBuilder.Entity("CharityAuction.Domain.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
